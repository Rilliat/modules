# meta developer: @rilliat
# scope: hikka_min 1.6.3
# meta pic: https://www.imagetotext.io/favicon.ico
import os

import aiohttp
import requests

from hikka import loader, utils

api_url = 'https://api.api-ninjas.com/v1/imagetotext'

@loader.tds
class ImageToTextMod(loader.Module):
    """Recognize text from an image"""
    strings = {
        'name': 'ImageToText',
        'no_token': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>Call <code>{prefix}imgauth</code> '
                    'before executing this command!</b>',
        'get_token': '<emoji document_id=5472308992514464048>üîê</emoji> <a href="https://api-ninjas.com/">'
                     'Proceed here</a>, get your token, then set <code>{prefix}fcfg ImageToText '
                     'api_token TOKEN</code> with your token',
        'no_image': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>Reply to an image</b>',
        'success': '<emoji document_id=5188311512791393083>üîé</emoji> <b>Results:</b>\n<code>{}</code>',
        'error': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>–ên unexpected error has occurred</b>:\n'
                 '<code>{}</code>',
        'loading': '<emoji document_id=5188311512791393083>üîé</emoji> <b>Loading...</b>',
    }

    strings_ru = {
        'no_token': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>–í—ã–∑–æ–≤–∏—Ç–µ <code>{prefix}imgauth</code> '
                    '–ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b>',
        'get_token': '<emoji document_id=5472308992514464048>üîê</emoji> <a href="https://api-ninjas.com/">'
                     '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ</a>, –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ <code>{prefix}fcfg ImageToText '
                     'api_token –¢–û–ö–ï–ù</code>',
        'no_image': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ!</b>',
        'success': '<emoji document_id=5188311512791393083>üîé</emoji> <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{}</code>',
        'error': '<emoji document_id=5348277823133999513>‚ùå</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>:\n'
                 '<code>{}</code>',
        'loading': '<emoji document_id=5188311512791393083>üîé</emoji> <b>–ó–∞–≥—Ä—É–∑–∫–∞...</b>',
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                option="token",
                default=None,
                doc="Access token for API",
                validator=loader.validators.Hidden()
            )
        )

    @loader.command(ru_doc='| –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
    async def imgauth(self, message):
        """| Set API token for recognition"""
        await utils.answer(message,
                           self.strings('get_token').format(prefix=self.get_prefix()),
                           reply_to=getattr(message, 'reply_to', None))

    @loader.command(ru_doc='| –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏')
    async def imgtext(self, message):
        """| Recognize text from an image"""
        try:
            if not await message.get_reply_message() or not (await message.get_reply_message()).media:
                await utils.answer(message,
                                   self.strings('no_image'),
                                   reply_to=getattr(message, 'reply_to', None))
                return

            if self.config.get('token') is None:
                await utils.answer(message,
                                   self.strings('no_token').format(prefix=self.get_prefix()),
                                   reply_to=getattr(message, 'reply_to', None))
                return


            await utils.answer(message,
                               self.strings('loading'),
                               reply_to=getattr(message, 'reply_to', None))

            img_path = await (await message.get_reply_message()).download_media(file=f'imgtext_{utils.rand(5)}.jpg')
            image = open(img_path, 'rb')

            files = {'image': image}
            headers = {'X-Api-Key': self.config.get('token')}
            response = requests.post(api_url, files=files, headers=headers)
            os.remove(img_path)

            assert response.status_code == 200

            final = ' '.join(x['text'] for x in response.json())
            await utils.answer(message,
                               self.strings('success').format(final),
                               reply_to=getattr(message, 'reply_to', None))

        except AssertionError as e:
            await utils.answer(message,
                               self.strings('error').format(e),
                               reply_to=getattr(message, 'reply_to', None))